/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.2.1).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */
package com.rah.testjava.microprice.service.api;

import java.time.LocalDate;

import javax.annotation.Generated;
import javax.validation.Valid;
import javax.validation.constraints.Pattern;

import org.springframework.format.annotation.DateTimeFormat;
import org.springframework.http.ResponseEntity;
import org.springframework.validation.annotation.Validated;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;

import com.rah.testjava.microprice.service.model.Price;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.media.Content;
import io.swagger.v3.oas.annotations.media.Schema;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.tags.Tag;

@Generated(value = "org.openapitools.codegen.languages.SpringCodegen", date = "2023-10-17T13:43:37.603931600+02:00[Europe/Paris]")
@Validated
@Tag(name = "price", description = "Everything about your Price")
public interface PriceApi {

    /**
     * GET /price/{date}/{productId}/{brandId} : Find price by date, productId and brandId
     * Returns a single Price
     *
     * @param date  (required)
     * @param productId  (required)
     * @param brandId  (required)
     * @param time  (optional)
     * @return successful operation (status code 200)
     *         or Invalid ID supplied (status code 400)
     *         or Price not found (status code 404)
     */
    @Operation(
        operationId = "getPrice",
        summary = "Find price by date, productId and brandId",
        tags = { "price" },
        responses = {
            @ApiResponse(responseCode = "200", description = "successful operation", content = {
                @Content(mediaType = "application/json", schema = @Schema(implementation = Price.class))
            }),
            @ApiResponse(responseCode = "400", description = "Invalid ID supplied"),
            @ApiResponse(responseCode = "404", description = "Price not found")
        }
    )
    @RequestMapping(
        method = RequestMethod.GET,
        value = "/price/{date}/{productId}/{brandId}",
        produces = { "application/json" }
    )
    ResponseEntity<Price> getPrice(
        @Parameter(name = "date", description = "", required = true) @PathVariable("date") @DateTimeFormat(iso = DateTimeFormat.ISO.DATE) LocalDate date,
        @Parameter(name = "productId", description = "", required = true) @PathVariable("productId") Integer productId,
        @Parameter(name = "brandId", description = "", required = true) @PathVariable("brandId") Integer brandId,
        @Pattern(regexp = "([01]?[0-9]|2[0-3]):[0-5][0-9]:[0-5][0-9]") @Parameter(name = "time", description = "") @Valid @RequestParam(value = "time", required = false) String time
    );

}
